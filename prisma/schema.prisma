// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum ChannelType {
  PUBLIC
  PRIVATE
  LOBBY
}

// User Data Model
model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String         @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole       @default(USER)
  profile                Profile[]
  accounts               Account[]
  sessions               Session[]

  // Optional for WebAuthn support
  Authenticator          Authenticator[]
 
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model Profile {
  id                     String         @id @default(uuid())
  userId                 String         @unique
  name                   String
  email                  String         @unique

  members                Member[]
  messages               Message[]

  conversationsInitiated Conversation[] @relation("ProfileOne")
  conversationsReceived  Conversation[] @relation("ProfileTwo")

  directMessages         DirectMessage[]

  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model Member {
  id        String   @id @default(uuid())

  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  channelId String   @unique
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// OAuth Account Details
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token]) 
}

model Channel {
  id        String      @id @default(uuid())
  name      String      @unique
  type      ChannelType @default(PUBLIC)

  members   Member[]

  messages  Message[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text

  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([profileId])
}

model Conversation {
  id             String  @id @default(uuid())

  profileOneId   String
  profileOneName String
  profileOne     Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId   String
  profileTwoName String
  profileTwo     Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([profileOneId])
  @@index([profileTwoId])

  @@unique([profileOneId, profileTwoId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String       @db.Text

  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
  @@index([profileId])
}